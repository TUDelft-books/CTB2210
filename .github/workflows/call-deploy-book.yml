name: call-deploy-book

on:
  push:
    branches:
    - '**'
    - '!CT1000'
    - '!2025-teacher' # Exclude to avoid triggering the deploy workflow on its own changes
    - '!2025' # Exclude to avoid triggering the deploy workflow on its own changes
    # If your git repository has the Jupyter Book within some-subfolder next to
    # unrelated files, you can make this run only if a file within that specific
    # folder (or the workflow file itself) has been modified.
    #
    paths:
    - book/**
    - requirements.txt
    - .github/workflows/call-deploy-book.yml
  workflow_dispatch:

jobs: 
  generate-student-version:
    if: github.ref == 'refs/heads/2025-teacher'
    name: Generate student versions
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nbformat

      - name: Remove solution sections from markdown files
        run: |
          python -c '
          import os

          # Walk through all files in the repository
          for root, _, files in os.walk("."):
              for file in files:
                  if file.endswith(".md"):
                      markdown_file = os.path.join(root, file)
                      with open(markdown_file, "r") as f:
                          lines = f.readlines()

                      # Remove lines between "% solution_start" and "% solution_end"
                      # Also remove MyST solution directive blocks between ":::{solution}" and ":::"
                      in_solution_block = False
                      in_myst_solution_block = False
                      myst_solution_colons = 0
                      filtered_lines = []
                      for line in lines:
                          stripped_line = line.strip()
                          if "% solution_start" in line:
                              in_solution_block = True
                          elif "% solution_end" in line:
                              in_solution_block = False
                          elif stripped_line.startswith(":::") and "{solution" in stripped_line:
                              # Count the number of colons at the start
                              colon_count = 0
                              for char in stripped_line:
                                  if char == ":":
                                      colon_count += 1
                                  else:
                                      break
                              if colon_count >= 3:
                                  in_myst_solution_block = True
                                  myst_solution_colons = colon_count
                          elif in_myst_solution_block and stripped_line == ":" * myst_solution_colons:
                              in_myst_solution_block = False
                              myst_solution_colons = 0
                          elif not in_solution_block and not in_myst_solution_block:
                              filtered_lines.append(line)

                      # Raise an error if a solution block was not properly closed
                      if in_solution_block:
                          raise ValueError("Unclosed % solution_start detected in file: " + markdown_file)
                      if in_myst_solution_block:
                          raise ValueError("Unclosed :::{solution} block detected in file: " + markdown_file)

                      # Save the modified markdown file
                      with open(markdown_file, "w") as f:
                          f.writelines(filtered_lines)
          '

      - name: Remove solution cells
        run: |
          python -c "
          import os
          import nbformat

          # Walk through all files in the repository
          for root, _, files in os.walk('.'):
              for file in files:
                  if file.endswith('.ipynb'):
                      notebook_file = os.path.join(root, file)
                      with open(notebook_file) as f:
                          notebook = nbformat.read(f, as_version=4)

                      # Remove cells tagged with 'solution'
                      notebook.cells = [cell for cell in notebook.cells if 'solution' not in cell.metadata.get('tags', [])]

                      # Save the modified notebook
                      with open(notebook_file, 'w') as f:
                          nbformat.write(notebook, f)
          "

      - name: Remove solution sections from notebook cells
        run: |
          python -c "
          import os
          import nbformat

          # Walk through all files in the repository
          for root, _, files in os.walk('.'):
              for file in files:
                  if file.endswith('.ipynb'):
                      notebook_file = os.path.join(root, file)
                      with open(notebook_file) as f:
                          notebook = nbformat.read(f, as_version=4)

                      # Process each cell to remove solution sections
                      for cell in notebook.cells:
                          if 'source' in cell and cell.source:
                              lines = cell.source.split('\n')
                              in_solution_block = False
                              in_myst_solution_block = False
                              myst_solution_colons = 0
                              filtered_lines = []
                              
                              for line in lines:
                                  stripped_line = line.strip()
                                  if '% solution_start' in line:
                                      in_solution_block = True
                                  elif '% solution_end' in line:
                                      in_solution_block = False
                                  elif stripped_line.startswith(':::') and '{solution' in stripped_line:
                                      # Count the number of colons at the start
                                      colon_count = 0
                                      for char in stripped_line:
                                          if char == ':':
                                              colon_count += 1
                                          else:
                                              break
                                      if colon_count >= 3:
                                          in_myst_solution_block = True
                                          myst_solution_colons = colon_count
                                  elif in_myst_solution_block and stripped_line == ':' * myst_solution_colons:
                                      in_myst_solution_block = False
                                      myst_solution_colons = 0
                                  elif not in_solution_block and not in_myst_solution_block:
                                      filtered_lines.append(line)
                              
                              # Raise an error if a solution block was not properly closed
                              if in_solution_block:
                                  raise ValueError('Unclosed % solution_start detected in notebook: ' + notebook_file)
                              if in_myst_solution_block:
                                  raise ValueError('Unclosed :::{solution} block detected in notebook: ' + notebook_file)
                              
                              # Update cell source
                              cell.source = '\n'.join(filtered_lines)

                      # Save the modified notebook
                      with open(notebook_file, 'w') as f:
                          nbformat.write(notebook, f)
          "

      - name: Commit and push changes assignment version
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_DEPLOY_KEY_CTB2210 }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b 2025-draft
          git merge origin/2025-teacher
          git add .
          git commit -m "Generate assignment version"
          git push origin 2025-draft --force

  merge-to-2025:
    needs: generate-student-version
    if: always() && github.ref == 'refs/heads/2025-teacher'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ACTIONS_DEPLOY_KEY_CTB2210 }}
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Merge 2025-draft into 2025
        run: |
          git checkout 2025
          git merge 2025-draft --no-ff -m "Auto-merge 2025-draft into 2025"
          git push origin 2025

  call-workflow:
    needs: merge-to-2025
    if: always() && (needs.merge-to-2025.result == 'success' || needs.merge-to-2025.result == 'skipped')
    uses: TeachBooks/deploy-book-workflow/.github/workflows/deploy-book.yml@main
    secrets: inherit
    permissions:
      contents: read
      pages: write
      id-token: write

