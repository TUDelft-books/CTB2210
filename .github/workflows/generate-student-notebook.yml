name: Generate student version

on:
  push:
    branches:
      - 2025-teacher
  workflow_dispatch:

jobs:
  generate-student-version:
    name: Generate student versions
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nbformat

      - name: Remove solution sections from markdown files
        run: |
          python -c '
          import os

          # Walk through all files in the repository
          for root, _, files in os.walk("."):
              for file in files:
                  if file.endswith(".md"):
                      markdown_file = os.path.join(root, file)
                      with open(markdown_file, "r") as f:
                          lines = f.readlines()

                      # Remove lines between "% solution_start" and "% solution_end"
                      in_solution_block = False
                      filtered_lines = []
                      for line in lines:
                          if "% solution_start" in line:
                              in_solution_block = True
                          elif "% solution_end" in line:
                              in_solution_block = False
                          elif not in_solution_block:
                              filtered_lines.append(line)

                      # Raise an error if a solution block was not properly closed
                      if in_solution_block:
                          raise ValueError("Unclosed % solution_start detected in file: " + markdown_file)

                      # Save the modified markdown file
                      with open(markdown_file, "w") as f:
                          f.writelines(filtered_lines)
          '

      - name: Remove solution cells
        run: |
          python -c "
          import os
          import nbformat

          # Walk through all files in the repository
          for root, _, files in os.walk('.'):
              for file in files:
                  if file.endswith('.ipynb'):
                      notebook_file = os.path.join(root, file)
                      with open(notebook_file) as f:
                          notebook = nbformat.read(f, as_version=4)

                      # Remove cells tagged with 'solution'
                      notebook.cells = [cell for cell in notebook.cells if 'solution' not in cell.metadata.get('tags', [])]

                      # Save the modified notebook
                      with open(notebook_file, 'w') as f:
                          nbformat.write(notebook, f)
          "

      - name: Remove solution sections from notebook cells
        run: |
          python -c "
          import os
          import nbformat

          # Walk through all files in the repository
          for root, _, files in os.walk('.'):
              for file in files:
                  if file.endswith('.ipynb'):
                      notebook_file = os.path.join(root, file)
                      with open(notebook_file) as f:
                          notebook = nbformat.read(f, as_version=4)

                      # Process each cell to remove solution sections
                      for cell in notebook.cells:
                          if 'source' in cell and cell.source:
                              lines = cell.source.split('\n')
                              in_solution_block = False
                              filtered_lines = []
                              
                              for line in lines:
                                  if '% solution_start' in line:
                                      in_solution_block = True
                                  elif '% solution_end' in line:
                                      in_solution_block = False
                                  elif not in_solution_block:
                                      filtered_lines.append(line)
                              
                              # Raise an error if a solution block was not properly closed
                              if in_solution_block:
                                  raise ValueError('Unclosed % solution_start detected in notebook: ' + notebook_file)
                              
                              # Update cell source
                              cell.source = '\n'.join(filtered_lines)

                      # Save the modified notebook
                      with open(notebook_file, 'w') as f:
                          nbformat.write(notebook, f)
          "

      - name: Commit and push changes assignment version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b 2025-draft
          git merge origin/2025-teacher
          git add .
          git commit -m "Generate assignment version"
          git push origin 2025-draft --force